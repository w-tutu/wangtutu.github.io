<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王图图</title>
  
  <subtitle>图图的个人博客</subtitle>
  <link href="http://wangtutu.com/atom.xml" rel="self"/>
  
  <link href="http://wangtutu.com/"/>
  <updated>2021-12-13T07:30:50.320Z</updated>
  <id>http://wangtutu.com/</id>
  
  <author>
    <name>图图</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git的使用与常用linux命令</title>
    <link href="http://wangtutu.com/2020/11/14/git/"/>
    <id>http://wangtutu.com/2020/11/14/git/</id>
    <published>2020-11-14T11:46:51.000Z</published>
    <updated>2021-12-13T07:30:50.320Z</updated>
    
    <content type="html"><![CDATA[<p>为了告别手动方式管理Linux代码,并且符合开源和免费,Linus花了两周时间自己用 C 写了一个分布式版本控制系统，这就是Git。<br>　　Git迅速成为最流行的分布式版本控制系统，尤其是 2008 年 GitHub 网站上线了，它为开源项目 免费提供Git存储 ，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。<br>　　<br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-xSP32g6d-1605424209816)(<a href="http://oi0f7tpni.bkt.clouddn.com/u=783377470,1728660278&amp;fm=214&amp;gp=0.jpg)]">http://oi0f7tpni.bkt.clouddn.com/u=783377470,1728660278&amp;fm=214&amp;gp=0.jpg)]</a>　　</p><a id="more"></a><h3 id="1-git的安装"><a href="#1-git的安装" class="headerlink" title="1. git的安装"></a>1. git的安装</h3><ul><li>windows下的安装<br>下载地址: <a href="http://git-scm.com/">http://git-scm.com</a></li></ul><blockquote><p>windows安装过程中记得选择在cmd下使用linux命令</p></blockquote><ul><li>mac下安装<br>下载HomeBrew: <a href="http://brew.sh/">http://brew.sh</a><br>拷贝对应脚本到终端下安装HomeBrew　然后在终端执行brew install git命令安装git</li></ul><blockquote><p>安装xcode会默认下载git</p></blockquote><h3 id="2-配置git用户和邮箱"><a href="#2-配置git用户和邮箱" class="headerlink" title="2. 配置git用户和邮箱"></a>2. 配置git用户和邮箱</h3><pre class=" language-js"><code class="language-js">    $ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"你的github用户名"</span>    $ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"你的github邮箱"</span></code></pre><blockquote><p>不配置用户名和邮箱的话无法提交，因为git不知道你是谁</p></blockquote><p>查看配置</p><pre class=" language-js"><code class="language-js">    $ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name    $ git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email</code></pre><p>查看所有配置</p><pre class=" language-js"><code class="language-js">    $git config <span class="token operator">--</span>list</code></pre><h3 id="3-初始化git"><a href="#3-初始化git" class="headerlink" title="3. 初始化git"></a>3. 初始化git</h3><ul><li>先创建一个空目录，可以直接手动创建，也可以在终端或命令行中输入mkdir 文件夹的名字 来创建，然后进入此目录，手动进入或在终端或命令行中输入cd（change directory）文件夹的名字，进入此目录（删除文件夹使用<code>$ rm -rf 文件夹名字</code>）</li><li>windows在当前文件夹右键点击Git Bash Here打开命令行，mac在当前文件选择在此打开终端窗口，或者直接在cmd命令行或终端里输入 git init 来初始化git，告诉git当前目录归它所管理</li></ul><blockquote><p>通过ls -al 命令查看当前目录下的所有文件</p></blockquote><h3 id="4-git中的三个区"><a href="#4-git中的三个区" class="headerlink" title="4. git中的三个区"></a>4. git中的三个区</h3><p><a href="http://card.mugeda.com/campaigns/56d2c4a0a3664e3308000407/20160304090522/56d97729a3664e9c65000047/index.html">git的工作流</a></p><h4 id="4-1-工作区"><a href="#4-1-工作区" class="headerlink" title="4.1 工作区"></a>4.1 工作区</h4><p>通过git add 添加到暂存区</p><pre class=" language-js"><code class="language-js">    $ git add <span class="token punctuation">.</span><span class="token operator">/</span><span class="token operator">-</span>a<span class="token operator">/</span>文件名</code></pre><blockquote><p>当前文件在命令行或终端里没有加入到暂存区是红色，加入后是绿色 可以通过<code>$ git status</code>命令查看；这里说几个常用的linux命令：</p></blockquote><pre class=" language-js"><code class="language-js">    $ touch 文件名  <span class="token comment" spellcheck="true">//创建文件</span>    $ echo 内容 <span class="token operator">></span><span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">.</span>txt  <span class="token comment" spellcheck="true">//一个大于号清空 创建 并写入 两个大于号追加</span>    $ cat 文件名  <span class="token comment" spellcheck="true">//查看文件</span>    $ vi 文件名  <span class="token comment" spellcheck="true">//修改文件 i键进入编辑状态 esc退出 :wq保存并退出  :q!强制退出</span></code></pre><h4 id="4-2-暂存区"><a href="#4-2-暂存区" class="headerlink" title="4.2 暂存区"></a>4.2 暂存区</h4><p>特点：过渡的作用，避免误操作，保护工作区和历史区，分支处理；<br>通过git commit添加到历史区</p><pre class=" language-js"><code class="language-js">    $ git commit <span class="token operator">-</span>m <span class="token string">'注释内容'</span>    </code></pre><h4 id="4-3-历史区"><a href="#4-3-历史区" class="headerlink" title="4.3 历史区"></a>4.3 历史区</h4><p>历史区的内容只要电脑不爆炸、不手动删除.git文件，内容永远不会丢失<br>查看历史状态及提交版本号：</p><pre class=" language-js"><code class="language-js">    $ git log <span class="token operator">/</span> $ git log <span class="token operator">--</span>oneline   <span class="token comment" spellcheck="true">//在命令末尾添加--oneline显示记录为一行    </span></code></pre><p>一步提交到历史区：</p><pre class=" language-js"><code class="language-js">    $ git commit <span class="token operator">-</span>a <span class="token operator">-</span>m<span class="token string">'注释内容'</span> <span class="token comment" spellcheck="true">//如果当前文件是首次提交则不支持此命令，需要逐步提交</span></code></pre><blockquote><p>有的时候我们希望提交时合并到上一次的提交: <code>$ git commit --amend</code>    </p></blockquote><p>在历史区中查询关键字：</p><pre class=" language-js"><code class="language-js">    $ git log <span class="token operator">--</span>grep<span class="token operator">/</span><span class="token operator">--</span>author<span class="token operator">=</span>提交者名字    </code></pre><h3 id="5-不同区的代码比较"><a href="#5-不同区的代码比较" class="headerlink" title="5. 不同区的代码比较"></a>5. 不同区的代码比较</h3><h4 id="5-1-工作区和暂存区"><a href="#5-1-工作区和暂存区" class="headerlink" title="5.1 工作区和暂存区"></a>5.1 工作区和暂存区</h4><pre class=" language-js"><code class="language-js">    $ git diff</code></pre><h4 id="5-2-暂存区和历史区"><a href="#5-2-暂存区和历史区" class="headerlink" title="5.2 暂存区和历史区"></a>5.2 暂存区和历史区</h4><pre class=" language-js"><code class="language-js">    $ git diff <span class="token operator">--</span>cached</code></pre><h4 id="5-3-工作区和历史区"><a href="#5-3-工作区和历史区" class="headerlink" title="5.3 工作区和历史区"></a>5.3 工作区和历史区</h4><pre class=" language-js"><code class="language-js">    $ git diff 分支的名字</code></pre><h3 id="6-撤销"><a href="#6-撤销" class="headerlink" title="6. 撤销"></a>6. 撤销</h3><h4 id="6-1-撤销回暂存区中新加的内容（git-add的内容）"><a href="#6-1-撤销回暂存区中新加的内容（git-add的内容）" class="headerlink" title="6.1 撤销回暂存区中新加的内容（git add的内容）"></a>6.1 撤销回暂存区中新加的内容（git add的内容）</h4><pre class=" language-js"><code class="language-js">    $ git reset HEAD 文件名    </code></pre><h4 id="6-2-撤回文件"><a href="#6-2-撤回文件" class="headerlink" title="6.2 撤回文件"></a>6.2 撤回文件</h4><p>先从暂存区撤销，暂存区无内容，从历史区撤销</p><pre class=" language-js"><code class="language-js">    $ git checkout 文件名</code></pre><h3 id="7-删除"><a href="#7-删除" class="headerlink" title="7. 删除"></a>7. 删除</h3><h4 id="7-1-删除暂存区和工作区"><a href="#7-1-删除暂存区和工作区" class="headerlink" title="7.1 删除暂存区和工作区"></a>7.1 删除暂存区和工作区</h4><p>删除暂存区中的内容,并且保证工作区中的内容已经不存在</p><pre class=" language-js"><code class="language-js">    $ git rm 文件名  <span class="token comment" spellcheck="true">//若本地文件存在则不能删除，需要通过-f参数删除        </span></code></pre><h4 id="7-2-仅删除暂存区"><a href="#7-2-仅删除暂存区" class="headerlink" title="7.2 仅删除暂存区"></a>7.2 仅删除暂存区</h4><pre class=" language-js"><code class="language-js">    $ git rm <span class="token operator">--</span>cached 文件名</code></pre><h3 id="8-恢复（版本回退）"><a href="#8-恢复（版本回退）" class="headerlink" title="8. 恢复（版本回退）"></a>8. 恢复（版本回退）</h3><h4 id="8-1-版本回退（历史区→工作区）"><a href="#8-1-版本回退（历史区→工作区）" class="headerlink" title="8.1 版本回退（历史区→工作区）"></a>8.1 版本回退（历史区→工作区）</h4><pre class=" language-js"><code class="language-js">    $ git reset <span class="token operator">--</span>hard 版本号    $ git reset <span class="token operator">--</span>hard HEAD<span class="token operator">~</span><span class="token number">3</span>  <span class="token comment" spellcheck="true">// HEAD^去上一级    </span></code></pre><h4 id="8-2-查看操作历史"><a href="#8-2-查看操作历史" class="headerlink" title="8.2 查看操作历史"></a>8.2 查看操作历史</h4><pre class=" language-js"><code class="language-js">    $ git log  <span class="token comment" spellcheck="true">//查看当前版本之前的内容</span>    $ git reflog  <span class="token comment" spellcheck="true">//查看所有操作历史        </span></code></pre><h3 id="9-分支"><a href="#9-分支" class="headerlink" title="9. 分支"></a>9. 分支</h3><p>主要是写代码时，不会影响主代码</p><h4 id="9-1-创建分支"><a href="#9-1-创建分支" class="headerlink" title="9.1 创建分支"></a>9.1 创建分支</h4><pre class=" language-js"><code class="language-js">    $ git branch 分支名字    </code></pre><h4 id="9-2-查看分支"><a href="#9-2-查看分支" class="headerlink" title="9.2 查看分支"></a>9.2 查看分支</h4><pre class=" language-js"><code class="language-js">    $ git branch</code></pre><h4 id="9-3-进入到分支（切换分支）"><a href="#9-3-进入到分支（切换分支）" class="headerlink" title="9.3 进入到分支（切换分支）"></a>9.3 进入到分支（切换分支）</h4><pre class=" language-js"><code class="language-js">    $ git checkout 分支名</code></pre><h4 id="9-4-删除分支"><a href="#9-4-删除分支" class="headerlink" title="9.4 删除分支"></a>9.4 删除分支</h4><pre class=" language-js"><code class="language-js">    $ git branch <span class="token operator">-</span>D 分支名</code></pre><h4 id="9-5-创建并切入分支"><a href="#9-5-创建并切入分支" class="headerlink" title="9.5 创建并切入分支"></a>9.5 创建并切入分支</h4><pre class=" language-js"><code class="language-js">    $ git checkout <span class="token operator">-</span>b dev  <span class="token comment" spellcheck="true">//创建并切入到dev分支上</span></code></pre><h4 id="9-6-合并分支"><a href="#9-6-合并分支" class="headerlink" title="9.6 合并分支"></a>9.6 合并分支</h4><pre class=" language-js"><code class="language-js">    $ git merge 被合并的分支名</code></pre><blockquote><p>每个人都会拥有一条分支，开发自己的代码，自己的代码开发完成后提交到自己的历史区，主分支来进行合并分支    ，注意区分主分支</p></blockquote><h4 id="9-7-合并分支时产生冲突的原因"><a href="#9-7-合并分支时产生冲突的原因" class="headerlink" title="9.7 合并分支时产生冲突的原因"></a>9.7 合并分支时产生冲突的原因</h4><p>两个人同时改变了同一个文件。git不知道谁是对的，要让自己裁决，裁决好后再次提交。只能手动合并。</p><h3 id="10-将本地内容推送到远程仓库"><a href="#10-将本地内容推送到远程仓库" class="headerlink" title="10. 将本地内容推送到远程仓库"></a>10. 将本地内容推送到远程仓库</h3><h4 id="10-1-关联远程仓库"><a href="#10-1-关联远程仓库" class="headerlink" title="10.1 关联远程仓库"></a>10.1 关联远程仓库</h4><pre class=" language-js"><code class="language-js">    $ git remote add origin（地址名） 远程仓库地址</code></pre><h4 id="10-2-移除关联的远程仓库"><a href="#10-2-移除关联的远程仓库" class="headerlink" title="10.2 移除关联的远程仓库"></a>10.2 移除关联的远程仓库</h4><pre class=" language-js"><code class="language-js">    $ git remote rm origin（地址名）</code></pre><h4 id="10-3-查看关联的远程仓库信息"><a href="#10-3-查看关联的远程仓库信息" class="headerlink" title="10.3 查看关联的远程仓库信息"></a>10.3 查看关联的远程仓库信息</h4><p>查看仓库名字</p><pre class=" language-js"><code class="language-js">    $ git remote     </code></pre><p>查看仓库地址</p><pre class=" language-js"><code class="language-js">    $ git remote <span class="token operator">-</span>v</code></pre><h4 id="10-4-推送到远程仓库"><a href="#10-4-推送到远程仓库" class="headerlink" title="10.4 推送到远程仓库"></a>10.4 推送到远程仓库</h4><p>要保证即将被推送到远程的内容已经添加到历史区，即已经执行过<code>$ git add .</code>&amp;&amp; <code>git commit -m""</code>，否则无法推送到远程仓库</p><pre class=" language-js"><code class="language-js">    $ git push origin master <span class="token comment" spellcheck="true">//可以选择加不加-u(upstream)参数 首次推送如果加-u则以后每次拉取和推送直接执行git pull/git push即可</span></code></pre><blockquote><p>如果本地和线上版本不一致，则需先进行拉取，如果拉取后有冲突，需要手动解决冲突，然后再推送    </p></blockquote><p> 强制覆盖远程仓库内容：<code>$ git push origin master -f</code>（谨慎使用此命令…后果很严重，你懂的…）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;为了告别手动方式管理Linux代码,并且符合开源和免费,Linus花了两周时间自己用 C 写了一个分布式版本控制系统，这就是Git。&lt;br&gt;　　Git迅速成为最流行的分布式版本控制系统，尤其是 2008 年 GitHub 网站上线了，它为开源项目 免费提供Git存储 ，无数开源项目开始迁移至GitHub，包括jQuery，PHP，Ruby等等。&lt;br&gt;　　&lt;br&gt;[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-xSP32g6d-1605424209816)(&lt;a href=&quot;http://oi0f7tpni.bkt.clouddn.com/u=783377470,1728660278&amp;amp;fm=214&amp;amp;gp=0.jpg)]&quot;&gt;http://oi0f7tpni.bkt.clouddn.com/u=783377470,1728660278&amp;amp;fm=214&amp;amp;gp=0.jpg)]&lt;/a&gt;　　&lt;/p&gt;</summary>
    
    
    
    
    <category term="git" scheme="http://wangtutu.com/tags/git/"/>
    
  </entry>
  
</feed>
